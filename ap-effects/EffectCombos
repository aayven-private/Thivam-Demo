Swipe:
mirror(X/Y) + follow
mirror(X/Y) + swarm(1/2)
shrink + swarm1
shrink + follow
shrink + follow + swarm2

-select + follow + rotate
-push + select + rotate + follow
-mirror_x + shrink + select

closer + rotate + swarm2 + select
push + select + rotate + follow
closer + closer + follow
mirror_y + rotate + select
wave + follow + rotate
push + follow + swarm2
reverseWave + mirror_y + swarm

follow + select
follow + follow + rotate + swarm2
push + follow
select + mirror_y + mirror_x + swarm2
wave + closer + swarm2 + follow
reverseWave + swarm2 + select
mirror_x + follow + swarm2
mirror_x + push + push + swarm2


-(void)loadEffectsForFullPad
{
_permAct = [[IBActionDescriptor alloc] init];
_permAct.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

//[targetNode.gestureIds addObject:weakSelf.currentGesture.gestureId];

/*weakSelf.colorCycle++;
if (weakSelf.colorCycle > [CommonTools getRandomNumberFromInt:50 toInt:500]) {
weakSelf.colorCycle = 0;
weakSelf.nextColor = [weakSelf.targetColors objectAtIndex:[CommonTools getRandomNumberFromInt:0 toInt:(int)weakSelf.targetColors.count - 1]];
}*/
//CGPoint triggerPos = ((NSValue *)[userInfo objectForKey:@"triggerNode"]).CGPointValue;
//[targetNode runAction:[SKAction colorizeWithColor:[CommonTools getRandomColorCloseToColor:weakSelf.nextColor withDispersion:.3] colorBlendFactor:1 duration:.4 * weakSelf.effectSpeed]];
UIColor *nextColor = [userInfo objectForKey:@"nextColor"];
NSNumber *reset = [userInfo objectForKey:@"reset"];
if (reset && reset.boolValue) {
[targetNode runAction:[SKAction colorizeWithColor:[UIColor clearColor] colorBlendFactor:1 duration:.3]];
} else {
targetNode.color = [CommonTools getRandomColorCloseToColor:nextColor withDispersion:.3];
}
//weakSelf.currentActionNodes++;


/*if (weakSelf.currentActionNodes == weakSelf.gridSize.width * weakSelf.gridSize.height) {
weakSelf.nextColor = [weakSelf.targetColors objectAtIndex:[CommonTools getRandomNumberFromInt:0 toInt:(int)weakSelf.targetColors.count - 1]];
weakSelf.effectSpeed = [CommonTools getRandomFloatFromFloat:1 toFloat:3];
weakSelf.mainActorNode = nil;
weakSelf.currentActionNodes = 0;

int loadIndex = [CommonTools getRandomNumberFromInt:0 toInt:2];
if (loadIndex == 0) {
[weakSelf loadCombo];
} else if (loadIndex == 1) {
[weakSelf loadRandomEffect];
} else if (loadIndex == 2) {
[weakSelf combineEffects];
}
}*/
};

//--------------------
IBActionDescriptor *waveEffect = [[IBActionDescriptor alloc] init];
waveEffect.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

SKAction *scaleSequence = [SKAction sequence:@[[SKAction scaleTo:.7 duration:.4 * _effectSpeed], [SKAction scaleTo:1 duration:.4 * _effectSpeed]]];

CGPoint sourcePosition = ((NSValue *)[userInfo objectForKey:@"startPoint"]).CGPointValue;
NodeObject *sourceNode = (NodeObject *)([self.effectPad getNodeAtPosition:sourcePosition].nodeObject);

int dX = abs(sourceNode.columnIndex - targetNode.columnIndex);
int dY = abs(sourceNode.rowIndex - targetNode.rowIndex);
double dist = sqrt(pow(dX, 2) + pow(dY, 2));

CGPoint vec = rwMult(rwNormalize(rwSub(sourceNode.initialScreenPosition, targetNode.initialScreenPosition)), dist <= 16 ? dist : 16);

SKAction *moveSequence = [SKAction sequence:@[[SKAction moveTo:rwAdd(targetNode.initialScreenPosition, vec) duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed]]];

[targetNode runAction:[SKAction group:@[scaleSequence, moveSequence, [SKAction sequence:@[[SKAction fadeAlphaTo:.7 duration:.4 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.4 * _effectSpeed]]]]]];

//double scale = [_effectPad getNodeValueAtPosition:CGPointMake(targetNode.columnIndex, targetNode.rowIndex) forActionType:@"action"];

//[targetNode runAction:[SKAction scaleTo:scale duration:.1]];

};
waveEffect.actionName = @"wave";

//--------------------

//--------------------
IBActionDescriptor *reverseWave = [[IBActionDescriptor alloc] init];
reverseWave.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {

NodeObject *targetNode = (NodeObject *)target;

SKAction *scaleSequence = [SKAction sequence:@[[SKAction scaleTo:1.4 duration:.4 * _effectSpeed], [SKAction scaleTo:1 duration:.4 * _effectSpeed]]];

CGPoint sourcePosition = ((NSValue *)[userInfo objectForKey:@"startPoint"]).CGPointValue;
NodeObject *sourceNode = (NodeObject *)([self.effectPad getNodeAtPosition:sourcePosition].nodeObject);

int dX = abs(sourceNode.columnIndex - targetNode.columnIndex);
int dY = abs(sourceNode.rowIndex - targetNode.rowIndex);
double dist = sqrt(pow(dX, 2) + pow(dY, 2));

CGPoint vec = rwMult(rwNormalize(rwSub(targetNode.initialScreenPosition, sourceNode.initialScreenPosition)), dist <= 16 ? dist : 16);

SKAction *moveSequence = [SKAction sequence:@[[SKAction moveTo:rwAdd(targetNode.initialScreenPosition, vec) duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed]]];

[targetNode runAction:[SKAction group:@[scaleSequence, moveSequence, [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.4 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.4 * _effectSpeed]]]]]];

//double scale = [_effectPad getNodeValueAtPosition:CGPointMake(targetNode.columnIndex, targetNode.rowIndex) forActionType:@"action"];

//[targetNode runAction:[SKAction scaleTo:scale duration:.1]];

};
reverseWave.actionName = @"reverseWave";

//--------------------

//--------------------
IBActionDescriptor *pushEffect = [[IBActionDescriptor alloc] init];
pushEffect.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {

NodeObject *targetNode = (NodeObject *)target;

CGPoint sourcePosition = ((NSValue *)[userInfo objectForKey:@"startPoint"]).CGPointValue;
NodeObject *sourceNode = (NodeObject *)([self.effectPad getNodeAtPosition:sourcePosition].nodeObject);

int dX = abs(sourceNode.columnIndex - targetNode.columnIndex);
int dY = abs(sourceNode.rowIndex - targetNode.rowIndex);
double dist = sqrt(pow(dX, 2) + pow(dY, 2));

double maxDist = sqrt(pow(_gridSize.width, 2) + pow(_gridSize.height, 2));

CGPoint vec = rwMult(rwNormalize(rwSub(targetNode.initialScreenPosition, sourceNode.initialScreenPosition)), dist * 7);


SKAction *moveSequence = [SKAction sequence:@[[SKAction moveTo:rwAdd(targetNode.initialScreenPosition, vec) duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed]]];
SKAction *scaleSequence = [SKAction sequence:@[[SKAction scaleTo:1 - dist / maxDist duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed]]];

[targetNode runAction:[SKAction group:@[[SKAction rotateByAngle:M_PI duration:.4 * _effectSpeed], moveSequence, scaleSequence, [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.4 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.4 * _effectSpeed]]]]]];

//double scale = [_effectPad getNodeValueAtPosition:CGPointMake(targetNode.columnIndex, targetNode.rowIndex) forActionType:@"action"];

//[targetNode runAction:[SKAction scaleTo:scale duration:.1]];

};
pushEffect.actionName = @"push";

//--------------------

//--------------------
IBActionDescriptor *select = [[IBActionDescriptor alloc] init];
select.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

CGPoint sourcePosition = ((NSValue *)[userInfo objectForKey:@"startPoint"]).CGPointValue;
NodeObject *sourceNode = (NodeObject *)([self.effectPad getNodeAtPosition:sourcePosition].nodeObject);

CGPoint vec = rwMult(rwNormalize(rwSub(targetNode.initialScreenPosition, sourceNode.initialScreenPosition)), 10);


int dX = abs(sourceNode.columnIndex - targetNode.columnIndex);
int dY = abs(sourceNode.rowIndex - targetNode.rowIndex);
double dist = sqrt(pow(dX, 2) + pow(dY, 2));

double maxDist = sqrt(pow(_gridSize.width, 2) + pow(_gridSize.height, 2));

//SKAction *moveSequence = [SKAction sequence:@[[SKAction moveTo:rwAdd(targetNode.initialScreenPosition, vec) duration:.4], [SKAction moveTo:targetNode.initialScreenPosition duration:.4]]];
//SKAction *scaleSequence = [SKAction sequence:@[[SKAction scaleTo:1 - dist / maxDist duration:.2], [SKAction scaleTo:1 duration:.2]]];

//[targetNode runAction:[SKAction group:@[moveSequence, scaleSequence, [SKAction colorizeWithColor:[UIColor greenColor] colorBlendFactor:1 duration:.4], [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.4], [SKAction fadeAlphaTo:1 duration:.4]]]]]];

[targetNode runAction:[SKAction sequence:@[[SKAction group:@[[SKAction moveTo:rwAdd(targetNode.initialScreenPosition, vec) duration:.2 * _effectSpeed], [SKAction scaleTo:1 + ((maxDist - dist) / maxDist) / 5 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 - (dist / maxDist) * 2 duration:.2 * _effectSpeed]]], [SKAction group:@[[SKAction moveTo:targetNode.initialScreenPosition duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.2 * _effectSpeed]]]]]];
};
select.actionName = @"select";

//--------------------

//--------------------
IBActionDescriptor *mirror_y = [[IBActionDescriptor alloc] init];
mirror_y.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

int targetColumn = _gridSize.width - 1 - targetNode.columnIndex;
NodeObject *destNode = (NodeObject *)[self.effectPad getNodeAtPosition:CGPointMake(targetColumn, targetNode.rowIndex)].nodeObject;
CGPoint targetPosition = destNode.initialScreenPosition;

SKAction *mirrorAction = [SKAction sequence:@[[SKAction group:@[[SKAction rotateByAngle:M_PI duration:.4 * _effectSpeed], [SKAction moveTo:targetPosition duration:.4 * _effectSpeed], [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.2 * _effectSpeed]]], [SKAction sequence:@[[SKAction scaleTo:.7 duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed]]]]], [SKAction group:@[[SKAction rotateByAngle:M_PI duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed], [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.2 * _effectSpeed]]], [SKAction sequence:@[[SKAction scaleTo:.7 duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed]]]]]]];

//[targetNode runAction:[SKAction group:@[[SKAction rotateByAngle:M_PI duration:.4 * _effectSpeed], [SKAction moveTo:targetPosition duration:.4 * _effectSpeed], [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.2 * _effectSpeed]]], [SKAction sequence:@[[SKAction scaleTo:.7 duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed]]]]]];

[targetNode runAction:mirrorAction];
};
mirror_y.actionName = @"mirror_y";

//--------------------

//--------------------
/*IBActionDescriptor *mirror_y_reverse = [[IBActionDescriptor alloc] init];
mirror_y_reverse.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

[targetNode runAction:[SKAction group:@[[SKAction rotateByAngle:M_PI duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed], [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.2 * _effectSpeed]]], [SKAction sequence:@[[SKAction scaleTo:.7 duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed]]]]]];
};*/

//[_effects addObject:mirror_y_reverse];
//--------------------

//--------------------
IBActionDescriptor *mirror_x = [[IBActionDescriptor alloc] init];
mirror_x.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

int targetRow = _gridSize.height - 1 - targetNode.rowIndex;
NodeObject *destNode = (NodeObject *)[self.effectPad getNodeAtPosition:CGPointMake(targetNode.columnIndex, targetRow)].nodeObject;
CGPoint targetPosition = destNode.initialScreenPosition;

SKAction *mirrorAction = [SKAction sequence:@[[SKAction group:@[[SKAction moveTo:targetPosition duration:.4 * _effectSpeed], [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.2 * _effectSpeed]]], [SKAction sequence:@[[SKAction scaleTo:.7 duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed]]]]], [SKAction group:@[[SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed], [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.2 * _effectSpeed]]], [SKAction sequence:@[[SKAction scaleTo:.7 duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed]]]]]]];

//[targetNode runAction:[SKAction group:@[[SKAction moveTo:targetPosition duration:.4 * _effectSpeed], [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.2 * _effectSpeed]]], [SKAction sequence:@[[SKAction scaleTo:.7 duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed]]]]]];
[targetNode runAction:mirrorAction];
};
mirror_x.actionName = @"mirror_x";

//--------------------

//--------------------
/*IBActionDescriptor *mirror_x_reverse = [[IBActionDescriptor alloc] init];
mirror_x_reverse.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

[targetNode runAction:[SKAction group:@[[SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed], [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.2 * _effectSpeed]]], [SKAction sequence:@[[SKAction scaleTo:.7 duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed]]]]]];
};*/

//[_effects addObject:mirror_x_reverse];
//--------------------

//--------------------
IBActionDescriptor *rotate = [[IBActionDescriptor alloc] init];
rotate.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

[targetNode runAction:[SKAction group:@[[SKAction rotateByAngle:M_PI duration:.4 * _effectSpeed], [SKAction sequence:@[[SKAction fadeAlphaTo:.5 duration:.2 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.2 * _effectSpeed]]], [SKAction sequence:@[[SKAction scaleTo:.7 duration:.2 * _effectSpeed], [SKAction scaleTo:1 duration:.2 * _effectSpeed]]]]]];
};
rotate.actionName = @"rotate";

//--------------------

//--------------------
IBActionDescriptor *shrink = [[IBActionDescriptor alloc] init];
shrink.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

CGPoint sourcePosition = ((NSValue *)[userInfo objectForKey:@"startPoint"]).CGPointValue;
NodeObject *sourceNode = (NodeObject *)([self.effectPad getNodeAtPosition:sourcePosition].nodeObject);

[targetNode runAction:[SKAction group:@[[SKAction rotateByAngle:M_PI duration:.8 * _effectSpeed], [SKAction sequence:@[[SKAction group:@[[SKAction moveTo:sourceNode.position duration:.4 * _effectSpeed], [SKAction fadeAlphaTo:.5 duration:.4 * _effectSpeed], [SKAction scaleTo:.5 duration:.4 * _effectSpeed]]], [SKAction group:@[[SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.4 * _effectSpeed], [SKAction scaleTo:1 duration:.4 * _effectSpeed]]]]]]]];
};
shrink.actionName = @"shrink";

//--------------------

//--------------------
IBActionDescriptor *swarm = [[IBActionDescriptor alloc] init];
swarm.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

CGPoint sourcePosition = ((NSValue *)[userInfo objectForKey:@"startPoint"]).CGPointValue;
NodeObject *sourceNode = (NodeObject *)([self.effectPad getNodeAtPosition:sourcePosition].nodeObject);

CGPoint vec = rwSub(sourceNode.position, targetNode.position);
double dist = rwLength(vec);

[targetNode runAction:[SKAction group:@[[SKAction sequence:@[[SKAction moveTo:CGPointMake(targetNode.position.x + [CommonTools getRandomNumberFromInt:-1 toInt:1] * dist, sourceNode.position.y + [CommonTools getRandomNumberFromInt:-1 toInt:1] * dist) duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed]]]]]];
};
swarm.actionName = @"swarm";

//--------------------

//[_effects removeAllObjects];

//--------------------
IBActionDescriptor *follow = [[IBActionDescriptor alloc] init];
follow.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

//CGPoint sourcePosition = ((NSValue *)[userInfo objectForKey:@"actionSource"]).CGPointValue;
//NodeObject *sourceNode = (NodeObject *)([_effectPad getNodeAtPosition:sourcePosition].nodeObject);

if (!_mainActorNode) {
_mainActorNode = targetNode;
CGPoint destination = CGPointMake(_gridSize.width - 1 - targetNode.columnIndex, _gridSize.height - 1 - targetNode.rowIndex);
NodeObject *destNode = (NodeObject *)[self.effectPad getNodeAtPosition:destination].nodeObject;
[targetNode runAction:[SKAction group:@[[SKAction sequence:@[[SKAction moveTo:destNode.position duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed]]]]]];
} else {
[targetNode runAction:[SKAction group:@[[SKAction sequence:@[[SKAction moveTo:_mainActorNode.position duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed]]]]]];
_mainActorNode = nil;

}

/*CGPoint vec = rwSub(sourceNode.position, targetNode.position);
double dist = rwLength(vec);

[targetNode runAction:[SKAction group:@[[SKAction colorizeWithColor:[CommonTools getRandomColorCloseToColor:_nextColor withDispersion:.3] colorBlendFactor:1 duration:.8], [SKAction sequence:@[[SKAction moveTo:CGPointMake(targetNode.position.x + [CommonTools getRandomNumberFromInt:-1 toInt:1] * dist, sourceNode.position.y + [CommonTools getRandomNumberFromInt:-1 toInt:1] * dist) duration:.4], [SKAction moveTo:targetNode.initialScreenPosition duration:.4]]]]]];*/
};
follow.actionName = @"follow";

//--------------------

//[_effects removeAllObjects];

//--------------------
IBActionDescriptor *swarm2 = [[IBActionDescriptor alloc] init];
swarm2.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

CGPoint sourcePosition = ((NSValue *)[userInfo objectForKey:@"startPoint"]).CGPointValue;
NodeObject *sourceNode = (NodeObject *)([self.effectPad getNodeAtPosition:sourcePosition].nodeObject);

CGPoint vec = rwSub(sourceNode.position, targetNode.position);
double dist = rwLength(vec);

[targetNode runAction:[SKAction group:@[[SKAction sequence:@[[SKAction moveTo:CGPointMake(targetNode.position.x + [CommonTools getRandomNumberFromInt:-1 toInt:1] * dist, sourceNode.position.y + [CommonTools getRandomNumberFromInt:-1 toInt:1] * dist) duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed]]]]]];

if (!_mainActorNode) {
_mainActorNode = targetNode;
CGPoint destination = CGPointMake(_gridSize.width - 1 - targetNode.columnIndex, _gridSize.height - 1 - targetNode.rowIndex);
NodeObject *destNode = _mainActorNode;
[targetNode runAction:[SKAction group:@[[SKAction sequence:@[[SKAction moveTo:destNode.position duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed]]]]]];
} else {
[targetNode runAction:[SKAction group:@[[SKAction sequence:@[[SKAction moveTo:CGPointMake(targetNode.position.x + [CommonTools getRandomNumberFromInt:-1 toInt:1] * dist, sourceNode.position.y + [CommonTools getRandomNumberFromInt:-1 toInt:1] * dist) duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed]]]]]];
_mainActorNode = nil;
}
};
swarm2.actionName = @"swarm2";

//--------------------

//--------------------
IBActionDescriptor *closer = [[IBActionDescriptor alloc] init];
closer.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

CGPoint destination = CGPointMake(_gridSize.width - 1 - targetNode.columnIndex, targetNode.rowIndex);
NodeObject *destNode = (NodeObject *)[self.effectPad getNodeAtPosition:destination].nodeObject;

if (_mainActorNode) {
[targetNode runAction:[SKAction sequence:@[[SKAction group:@[[SKAction moveTo:destNode.position duration:.4 * _effectSpeed], [SKAction fadeAlphaTo:.5 duration:.4 * _effectSpeed], [SKAction scaleTo:.5 duration:.4 * _effectSpeed]]], [SKAction group:@[[SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.4 * _effectSpeed], [SKAction scaleTo:1 duration:.4 * _effectSpeed]]]]]];
_mainActorNode = nil;
} else {
_mainActorNode = targetNode;
[targetNode runAction:[SKAction sequence:@[[SKAction group:@[[SKAction moveTo:destNode.position duration:.4 * _effectSpeed], [SKAction fadeAlphaTo:.5 duration:.4 * _effectSpeed], [SKAction scaleTo:.5 duration:.4 * _effectSpeed]]], [SKAction group:@[[SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.4 * _effectSpeed], [SKAction scaleTo:1 duration:.4 * _effectSpeed]]]]]];
}
};
closer.actionName = @"closer";

//--------------------

//[_effectPad.unifiedActionDescriptors setObject:@[swarm2, _permAct] forKey:@"action"];
//[self loadRandomEffect];

//--------------------
IBActionDescriptor *draw = [[IBActionDescriptor alloc] init];
draw.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

int targetColumn = _gridSize.width - 1 - targetNode.columnIndex;
int targetRow = _gridSize.height - 1 - targetNode.rowIndex;

CGPoint mirror_y = CGPointMake(targetColumn, targetNode.rowIndex);
CGPoint mirror_x = CGPointMake(targetNode.columnIndex, targetRow);
CGPoint mirror_x_y = CGPointMake(targetColumn, targetRow);

NodeObject *destNode_x = (NodeObject *)[self.effectPad getNodeAtPosition:mirror_x].nodeObject;
NodeObject *destNode_y = (NodeObject *)[self.effectPad getNodeAtPosition:mirror_y].nodeObject;
NodeObject *destNode_x_y = (NodeObject *)[self.effectPad getNodeAtPosition:mirror_x_y].nodeObject;

UIColor *nextColor = [userInfo objectForKey:@"nextColor"];

targetNode.color = [CommonTools getRandomColorCloseToColor:nextColor withDispersion:.3];
destNode_x.color = [CommonTools getRandomColorCloseToColor:nextColor withDispersion:.3];
destNode_y.color = [CommonTools getRandomColorCloseToColor:nextColor withDispersion:.3];
destNode_x_y.color = [CommonTools getRandomColorCloseToColor:nextColor withDispersion:.3];

[targetNode runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:1 duration:.2], [SKAction fadeAlphaTo:0 duration:1.5]]]];
/*if (_isMirror_x) {
[destNode_x runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:1 duration:.2], [SKAction fadeAlphaTo:0 duration:1.5]]]];
}
if (_isMirror_y) {
[destNode_y runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:1 duration:.2], [SKAction fadeAlphaTo:0 duration:1.5]]]];
}
if (_isMirror_x && _isMirror_y) {
[destNode_x_y runAction:[SKAction sequence:@[[SKAction fadeAlphaTo:1 duration:.2], [SKAction fadeAlphaTo:0 duration:1.5]]]];
}*/
};
[self.effectPad.unifiedActionDescriptors setObject:@[draw, _permAct] forKey:@"draw"];
//--------------------

//--------------------
IBActionDescriptor *gestureWave = [[IBActionDescriptor alloc] init];
gestureWave.action = ^(id<IBActionNodeActor>target, NSDictionary *userInfo) {
NodeObject *targetNode = (NodeObject *)target;

NSString *gestureId = [userInfo objectForKey:@"gestureId"];
//if ([targetNode.gestureIds containsObject:gestureId]) {
SKAction *scaleSequence = [SKAction sequence:@[[SKAction scaleTo:.7 duration:.4 * _effectSpeed], [SKAction scaleTo:1 duration:.4 * _effectSpeed]]];

CGPoint sourcePosition = ((NSValue *)[userInfo objectForKey:@"startPoint"]).CGPointValue;
NodeObject *sourceNode = (NodeObject *)([self.effectPad getNodeAtPosition:sourcePosition].nodeObject);

int dX = abs(sourceNode.columnIndex - targetNode.columnIndex);
int dY = abs(sourceNode.rowIndex - targetNode.rowIndex);
double dist = sqrt(pow(dX, 2) + pow(dY, 2));

CGPoint vec = rwMult(rwNormalize(rwSub(sourceNode.initialScreenPosition, targetNode.initialScreenPosition)), dist <= 16 ? dist : 16);

SKAction *moveSequence = [SKAction sequence:@[[SKAction moveTo:rwAdd(targetNode.initialScreenPosition, vec) duration:.4 * _effectSpeed], [SKAction moveTo:targetNode.initialScreenPosition duration:.4 * _effectSpeed]]];

[targetNode runAction:[SKAction group:@[scaleSequence, moveSequence, [SKAction sequence:@[[SKAction fadeAlphaTo:.7 duration:.4 * _effectSpeed], [SKAction fadeAlphaTo:1 duration:.4 * _effectSpeed]]]]]];
//}
};
[self.effectPad.unifiedActionDescriptors setObject:@[gestureWave] forKey:@"gestureWave"];
//--------------------


NSArray *cmb1 = @[mirror_x, shrink, select];
NSArray *cmb2 = @[select, follow, rotate];
NSArray *cmb3 = @[waveEffect, closer, swarm2, follow];
NSArray *cmb4 = @[reverseWave, swarm2, select];
NSArray *cmb5 = @[mirror_x, follow];
NSArray *cmb6 = @[mirror_y, follow];
NSArray *cmb7 = @[mirror_x, swarm];
NSArray *cmb8 = @[mirror_y, swarm];
NSArray *cmb9 = @[mirror_x, swarm2];
NSArray *cmb10 = @[mirror_y, swarm2];
NSArray *cmb11 = @[shrink, swarm];
NSArray *cmb12 = @[shrink, follow];
NSArray *cmb13 = @[shrink, follow, swarm2];

[_combos addObjectsFromArray:@[cmb1, cmb2, cmb3, cmb4, cmb5, cmb6, cmb7, cmb8, cmb9, cmb10, cmb11, cmb12, cmb13]];

[_effects addObject:waveEffect];
[_effects addObject:reverseWave];
[_effects addObject:closer];
[_effects addObject:mirror_y];
[_effects addObject:mirror_x];
[_effects addObject:pushEffect];
[_effects addObject:swarm2];
[_effects addObject:select];
[_effects addObject:follow];
[_effects addObject:rotate];
[_effects addObject:swarm];
[_effects addObject:shrink];

//[self combineAllEffects];
//[self loadRandomEffect];
[self loadRandomEffect];
}